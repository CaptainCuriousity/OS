Управление адресным пространством:
a. Напишите программу, которая:
	i. выводит pid процесса;
	ii.ждет одну секунду;
	iii.делает exec(2) самой себя;
	iv.выводит сообщение “Hello world”

b. Понаблюдайте за выводом программы и содержимым соответствующего файла /proc/<pid>/maps. Объясните происходящее.

c. Напишите программу, которая:
	i.выводит pid процесса;
	ii.ждет 10 секунд (подберите паузу чтобы успеть начать мониторить адресное пространство процесса, например, watch cat /proc/<pid>/maps);
	iii. напишите функцию, которая будет выделять на стеке массив (например, 4096 байт) и рекурсивно вызывать себя;
	iv. понаблюдайте как изменяется адресное пространство процесса (стек);
	v. напишите цикл, в котором на каждой итерации будет выделяться память на куче (подберите размер буфера сами). 
	Используйте секундную паузу между итерациями.
	vi. понаблюдайте как изменится адресное пространство процесса (heap);
	vii. освободите занятую память.
	viii. присоедините к процессу еще один регион адресов размером в 10
	страниц (используйте mmap(2) с флагом ANONYMOUS).
	ix. понаблюдайте за адресным пространством. Измените права доступа к созданному региону и проверьте какая будет реакция, если их нарушить:
		1) запретите читать данные и попробуйте прочитать из региона.
		2) запретите писать и попробуйте записать.
	xi. попробуйте перехватить сигнал SIGSEGV.
	xii. отсоедините страницы с 4 по 6 в созданном вами регионе.
	xiii. понаблюдайте за адресным пространством.

d. Чтобы было удобнее наблюдать за адресным пространством подберите
удобные паузы между операциями изменяющими его.
e. Объясните что происходит с адресным пространством в данной задаче.

Process.
a. done
b. Upon every program execution data segments are changed.
c. from i to iv:
The stack pointer is moved until segfault

d. from v to vi
Heap the pointer is moved, then new anonymous segment is created.

from vi to xi:

void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off)
Creates mapping from virtual memory
Creates new segment in virtual memory

flags:
MAP_PRIVATE/MAP_SHARED describe the disposition of write references
MAP_SHARED means that changes are shared, private means private.
MAP_ANONYMOUS 
prot  determine what i can do and what i can't do
len - length of needed data
addr - starting address

In my situation, fildes is -1 (its used cuz i use MAP_ANONYMOUS)
offset is 0 (im not moving from the start of address)

Reverse to mmap:
int munmap(void* addr, size_t len) - removal of mapping for pages containing any space
from addr to addr + len

mprotect: takes rights from me

signal is about signal management (!!!!!)
SIG_IGN means to ignore signal, I use SIG_DFL (default action)

e. explain c





