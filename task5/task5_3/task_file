Создание процесса при помощи системного вызова clone(2):

a. Используйте системный вызов clone(2) для создания процесса:
	i. Память для стека выделите при помощи mmap(2), таким образом,
	чтобы новый регион был связан с файлом и синхронизировался с
	ним при изменении. Т.е. при записи в новый регион, данные
	должны синхронизироваться с файлом.
	ii. Напишите две функции:
	1. Первая - точка входа для нового процесса.
	2. Вторая функция должна выделять на стеке массив со
	строкой “hello world” и рекурсивно вызывать себя. Глубина
	рекурсии пусть будет равна 10.
	iii. Вызовите вторую функцию из функции нового процесса и после
	ее исполнения завершите новый процесс.

b. Исследуйте полученный файл:
i. найдите строки “hello world”. Сколько их и почему столько?
ii. найдите переменную счетчик, которая используется для
ограничения рекурсии.
iii. найдите адреса возврата из функций.

there's also some newer clone3(2) syscall, i don't know what it is about...
What is clone(2)?
A syscall, has a lot of common with fork(2), but:
1) It has more options, giving more control to programmer;
2) Execution continues not from the place it was found, but
starting from function:

Default information about fork syscall (copied from book):
1) shares fn's
2) shares memory

Signature:
int clone(int (*fn), void *stack, int flag, void * arg, ...(parent_tid, tls, child_tid))

By contrast with fork, this syscalls give more control over what pieces of 
parent process are shared.
For example, I can control whether or not the two processes will share virtual address space,
table of file descriptors, etc.


b.
i. There are 11 hello world in file. 10 are printed manually, 11th is a constant.
ii. Can be found, and was found
iii. return address is ~constant

